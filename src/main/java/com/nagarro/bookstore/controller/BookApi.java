/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 */
package com.nagarro.bookstore.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.nagarro.bookstore.model.Book;
import com.nagarro.bookstore.model.BookRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-05T04:48:53.265Z")

@Api(value = "bookstore", description = "the bookstore API")
public interface BookApi {

	@ApiOperation(value = "Add a new book to the store", nickname = "addBook", notes = "", tags = { "bookstore", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successfully created", response = Book.class),
			@ApiResponse(code = 500, message = "failed operation"),
			@ApiResponse(code = 400, message = "Invalid input") })
	@RequestMapping(value = "/book", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Book> addBook(
			@ApiParam(value = "Book object that needs to be added to the store", required = true) @Valid @RequestBody BookRequest body);

	@ApiOperation(value = "Delete book", nickname = "deleteBook", notes = "", tags = { "bookstore", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successfully deleted"),
			@ApiResponse(code = 500, message = "Invalid book supplied") })
	@RequestMapping(value = "/book/{isbn}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteBook(
			@ApiParam(value = "The book id that needs to be deleted", required = true) @PathVariable("isbn") String isbn);

	@ApiOperation(value = "Finds Books by isbn, title or author", nickname = "findBooksByQuery", notes = "Any combination of three parameters can be provided.", response = Book.class, responseContainer = "List", tags = {
			"bookstore", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "successful operation", response = Book.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Invalid parameter value"),
			@ApiResponse(code = 500, message = "failed operation") })
	@RequestMapping(value = "/books", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<Book>> findBooksByQuery(
			@ApiParam(value = "book title to be found") @Valid @RequestParam(value = "title", required = false) String title,
			@ApiParam(value = "author name") @Valid @RequestParam(value = "author", required = false) String author,
			@ApiParam(value = "isbn number") @Valid @RequestParam(value = "isbn", required = false) String isbn);

	@ApiOperation(value = "Get book by isbn number", nickname = "getBookByIsbn", notes = "", response = Book.class, tags = {
			"bookstore", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = Book.class),
			@ApiResponse(code = 500, message = "Invalid isbn supplied"),
			@ApiResponse(code = 404, message = "book not found") })
	@RequestMapping(value = "/book/{isbn}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<Book> getBookByIsbn(
			@ApiParam(value = "The isbn/id number of the book.", required = true) @PathVariable("isbn") String isbn);

	@ApiOperation(value = "Fetches media coverage for a book by its title", nickname = "getMediaCoverage", notes = "", response = Book.class, responseContainer = "List", tags = {
			"bookstore", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "successful operation", response = Book.class, responseContainer = "List"),
			@ApiResponse(code = 500, message = "failed operation") })
	@RequestMapping(value = "/mediaCoverage", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<String>> getMediaCoverage(
			@ApiParam(value = "book title") @RequestParam(value = "title", required = true) String booktTitle);

	@ApiOperation(value = "order book", nickname = "orderBook", notes = "order a book", tags = { "bookstore", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid book supplied"),
			@ApiResponse(code = 404, message = "book not found"),
			@ApiResponse(code = 500, message = "failed operation") })
	@RequestMapping(value = "/order/{isbn}", produces = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<String> orderBook(
			@ApiParam(value = "isbn of book to be ordered", required = true) @PathVariable("isbn") String isbn,
			@ApiParam(value = "book object to be ordered", required = true) @Valid @RequestBody Book body);

}
